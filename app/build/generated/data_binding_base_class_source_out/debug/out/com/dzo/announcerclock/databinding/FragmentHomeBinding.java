// Generated by view binder compiler. Do not edit!
package com.dzo.announcerclock.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ScrollView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatImageView;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.appcompat.widget.LinearLayoutCompat;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.dzo.announcerclock.R;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.progressindicator.CircularProgressIndicator;
import com.google.android.material.slider.Slider;
import com.google.android.material.switchmaterial.SwitchMaterial;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentHomeBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final CircularProgressIndicator circularProgress;

  @NonNull
  public final MaterialCardView custom;

  @NonNull
  public final SwitchMaterial customToggle;

  @NonNull
  public final AppCompatTextView customize;

  @NonNull
  public final LinearLayoutCompat generalSettings;

  @NonNull
  public final MaterialCardView header;

  @NonNull
  public final AppCompatImageView img;

  @NonNull
  public final AppCompatImageView img1;

  @NonNull
  public final AppCompatImageView img2;

  @NonNull
  public final AppCompatImageView img3;

  @NonNull
  public final AppCompatImageView img4;

  @NonNull
  public final AppCompatTextView repeat;

  @NonNull
  public final AppCompatTextView selectedRepeatTime;

  @NonNull
  public final AppCompatTextView selectedSound;

  @NonNull
  public final AppCompatTextView selectedVibration;

  @NonNull
  public final AppCompatTextView selectedVolume;

  @NonNull
  public final ConstraintLayout setRepeatTime;

  @NonNull
  public final ConstraintLayout setSound;

  @NonNull
  public final ConstraintLayout setTtsSettings;

  @NonNull
  public final ConstraintLayout setVibration;

  @NonNull
  public final ConstraintLayout setVolume;

  @NonNull
  public final MaterialCardView settings;

  @NonNull
  public final AppCompatTextView sound;

  @NonNull
  public final FloatingActionButton speakCurrentTime;

  @NonNull
  public final AppCompatTextView timerText;

  @NonNull
  public final AppCompatTextView tts;

  @NonNull
  public final AppCompatTextView txtSetting;

  @NonNull
  public final AppCompatTextView txtTts;

  @NonNull
  public final AppCompatTextView vibration;

  @NonNull
  public final Slider volRocker;

  @NonNull
  public final AppCompatTextView volume;

  private FragmentHomeBinding(@NonNull ScrollView rootView,
      @NonNull CircularProgressIndicator circularProgress, @NonNull MaterialCardView custom,
      @NonNull SwitchMaterial customToggle, @NonNull AppCompatTextView customize,
      @NonNull LinearLayoutCompat generalSettings, @NonNull MaterialCardView header,
      @NonNull AppCompatImageView img, @NonNull AppCompatImageView img1,
      @NonNull AppCompatImageView img2, @NonNull AppCompatImageView img3,
      @NonNull AppCompatImageView img4, @NonNull AppCompatTextView repeat,
      @NonNull AppCompatTextView selectedRepeatTime, @NonNull AppCompatTextView selectedSound,
      @NonNull AppCompatTextView selectedVibration, @NonNull AppCompatTextView selectedVolume,
      @NonNull ConstraintLayout setRepeatTime, @NonNull ConstraintLayout setSound,
      @NonNull ConstraintLayout setTtsSettings, @NonNull ConstraintLayout setVibration,
      @NonNull ConstraintLayout setVolume, @NonNull MaterialCardView settings,
      @NonNull AppCompatTextView sound, @NonNull FloatingActionButton speakCurrentTime,
      @NonNull AppCompatTextView timerText, @NonNull AppCompatTextView tts,
      @NonNull AppCompatTextView txtSetting, @NonNull AppCompatTextView txtTts,
      @NonNull AppCompatTextView vibration, @NonNull Slider volRocker,
      @NonNull AppCompatTextView volume) {
    this.rootView = rootView;
    this.circularProgress = circularProgress;
    this.custom = custom;
    this.customToggle = customToggle;
    this.customize = customize;
    this.generalSettings = generalSettings;
    this.header = header;
    this.img = img;
    this.img1 = img1;
    this.img2 = img2;
    this.img3 = img3;
    this.img4 = img4;
    this.repeat = repeat;
    this.selectedRepeatTime = selectedRepeatTime;
    this.selectedSound = selectedSound;
    this.selectedVibration = selectedVibration;
    this.selectedVolume = selectedVolume;
    this.setRepeatTime = setRepeatTime;
    this.setSound = setSound;
    this.setTtsSettings = setTtsSettings;
    this.setVibration = setVibration;
    this.setVolume = setVolume;
    this.settings = settings;
    this.sound = sound;
    this.speakCurrentTime = speakCurrentTime;
    this.timerText = timerText;
    this.tts = tts;
    this.txtSetting = txtSetting;
    this.txtTts = txtTts;
    this.vibration = vibration;
    this.volRocker = volRocker;
    this.volume = volume;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentHomeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_home, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentHomeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.circularProgress;
      CircularProgressIndicator circularProgress = ViewBindings.findChildViewById(rootView, id);
      if (circularProgress == null) {
        break missingId;
      }

      id = R.id.custom;
      MaterialCardView custom = ViewBindings.findChildViewById(rootView, id);
      if (custom == null) {
        break missingId;
      }

      id = R.id.customToggle;
      SwitchMaterial customToggle = ViewBindings.findChildViewById(rootView, id);
      if (customToggle == null) {
        break missingId;
      }

      id = R.id.customize;
      AppCompatTextView customize = ViewBindings.findChildViewById(rootView, id);
      if (customize == null) {
        break missingId;
      }

      id = R.id.generalSettings;
      LinearLayoutCompat generalSettings = ViewBindings.findChildViewById(rootView, id);
      if (generalSettings == null) {
        break missingId;
      }

      id = R.id.header;
      MaterialCardView header = ViewBindings.findChildViewById(rootView, id);
      if (header == null) {
        break missingId;
      }

      id = R.id.img;
      AppCompatImageView img = ViewBindings.findChildViewById(rootView, id);
      if (img == null) {
        break missingId;
      }

      id = R.id.img1;
      AppCompatImageView img1 = ViewBindings.findChildViewById(rootView, id);
      if (img1 == null) {
        break missingId;
      }

      id = R.id.img2;
      AppCompatImageView img2 = ViewBindings.findChildViewById(rootView, id);
      if (img2 == null) {
        break missingId;
      }

      id = R.id.img3;
      AppCompatImageView img3 = ViewBindings.findChildViewById(rootView, id);
      if (img3 == null) {
        break missingId;
      }

      id = R.id.img4;
      AppCompatImageView img4 = ViewBindings.findChildViewById(rootView, id);
      if (img4 == null) {
        break missingId;
      }

      id = R.id.repeat;
      AppCompatTextView repeat = ViewBindings.findChildViewById(rootView, id);
      if (repeat == null) {
        break missingId;
      }

      id = R.id.selectedRepeatTime;
      AppCompatTextView selectedRepeatTime = ViewBindings.findChildViewById(rootView, id);
      if (selectedRepeatTime == null) {
        break missingId;
      }

      id = R.id.selectedSound;
      AppCompatTextView selectedSound = ViewBindings.findChildViewById(rootView, id);
      if (selectedSound == null) {
        break missingId;
      }

      id = R.id.selectedVibration;
      AppCompatTextView selectedVibration = ViewBindings.findChildViewById(rootView, id);
      if (selectedVibration == null) {
        break missingId;
      }

      id = R.id.selectedVolume;
      AppCompatTextView selectedVolume = ViewBindings.findChildViewById(rootView, id);
      if (selectedVolume == null) {
        break missingId;
      }

      id = R.id.setRepeatTime;
      ConstraintLayout setRepeatTime = ViewBindings.findChildViewById(rootView, id);
      if (setRepeatTime == null) {
        break missingId;
      }

      id = R.id.setSound;
      ConstraintLayout setSound = ViewBindings.findChildViewById(rootView, id);
      if (setSound == null) {
        break missingId;
      }

      id = R.id.setTtsSettings;
      ConstraintLayout setTtsSettings = ViewBindings.findChildViewById(rootView, id);
      if (setTtsSettings == null) {
        break missingId;
      }

      id = R.id.setVibration;
      ConstraintLayout setVibration = ViewBindings.findChildViewById(rootView, id);
      if (setVibration == null) {
        break missingId;
      }

      id = R.id.setVolume;
      ConstraintLayout setVolume = ViewBindings.findChildViewById(rootView, id);
      if (setVolume == null) {
        break missingId;
      }

      id = R.id.settings;
      MaterialCardView settings = ViewBindings.findChildViewById(rootView, id);
      if (settings == null) {
        break missingId;
      }

      id = R.id.sound;
      AppCompatTextView sound = ViewBindings.findChildViewById(rootView, id);
      if (sound == null) {
        break missingId;
      }

      id = R.id.speakCurrentTime;
      FloatingActionButton speakCurrentTime = ViewBindings.findChildViewById(rootView, id);
      if (speakCurrentTime == null) {
        break missingId;
      }

      id = R.id.timerText;
      AppCompatTextView timerText = ViewBindings.findChildViewById(rootView, id);
      if (timerText == null) {
        break missingId;
      }

      id = R.id.tts;
      AppCompatTextView tts = ViewBindings.findChildViewById(rootView, id);
      if (tts == null) {
        break missingId;
      }

      id = R.id.txtSetting;
      AppCompatTextView txtSetting = ViewBindings.findChildViewById(rootView, id);
      if (txtSetting == null) {
        break missingId;
      }

      id = R.id.txtTts;
      AppCompatTextView txtTts = ViewBindings.findChildViewById(rootView, id);
      if (txtTts == null) {
        break missingId;
      }

      id = R.id.vibration;
      AppCompatTextView vibration = ViewBindings.findChildViewById(rootView, id);
      if (vibration == null) {
        break missingId;
      }

      id = R.id.volRocker;
      Slider volRocker = ViewBindings.findChildViewById(rootView, id);
      if (volRocker == null) {
        break missingId;
      }

      id = R.id.volume;
      AppCompatTextView volume = ViewBindings.findChildViewById(rootView, id);
      if (volume == null) {
        break missingId;
      }

      return new FragmentHomeBinding((ScrollView) rootView, circularProgress, custom, customToggle,
          customize, generalSettings, header, img, img1, img2, img3, img4, repeat,
          selectedRepeatTime, selectedSound, selectedVibration, selectedVolume, setRepeatTime,
          setSound, setTtsSettings, setVibration, setVolume, settings, sound, speakCurrentTime,
          timerText, tts, txtSetting, txtTts, vibration, volRocker, volume);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
