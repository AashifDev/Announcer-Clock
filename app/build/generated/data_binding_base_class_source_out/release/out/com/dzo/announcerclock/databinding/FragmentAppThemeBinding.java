// Generated by view binder compiler. Do not edit!
package com.dzo.announcerclock.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatButton;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.appcompat.widget.LinearLayoutCompat;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.dzo.announcerclock.R;
import com.google.android.flexbox.FlexboxLayout;
import com.google.android.material.switchmaterial.SwitchMaterial;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentAppThemeBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final AppCompatButton chooseAppColor;

  @NonNull
  public final FlexboxLayout colorContainer;

  @NonNull
  public final SwitchMaterial enableDarkMode;

  @NonNull
  public final LinearLayoutCompat linearLayoutCompat1;

  @NonNull
  public final AppCompatTextView txtChooseColor;

  @NonNull
  public final AppCompatTextView txtEnableDarkTheme;

  private FragmentAppThemeBinding(@NonNull ConstraintLayout rootView,
      @NonNull AppCompatButton chooseAppColor, @NonNull FlexboxLayout colorContainer,
      @NonNull SwitchMaterial enableDarkMode, @NonNull LinearLayoutCompat linearLayoutCompat1,
      @NonNull AppCompatTextView txtChooseColor, @NonNull AppCompatTextView txtEnableDarkTheme) {
    this.rootView = rootView;
    this.chooseAppColor = chooseAppColor;
    this.colorContainer = colorContainer;
    this.enableDarkMode = enableDarkMode;
    this.linearLayoutCompat1 = linearLayoutCompat1;
    this.txtChooseColor = txtChooseColor;
    this.txtEnableDarkTheme = txtEnableDarkTheme;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentAppThemeBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentAppThemeBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_app_theme, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentAppThemeBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.chooseAppColor;
      AppCompatButton chooseAppColor = ViewBindings.findChildViewById(rootView, id);
      if (chooseAppColor == null) {
        break missingId;
      }

      id = R.id.colorContainer;
      FlexboxLayout colorContainer = ViewBindings.findChildViewById(rootView, id);
      if (colorContainer == null) {
        break missingId;
      }

      id = R.id.enableDarkMode;
      SwitchMaterial enableDarkMode = ViewBindings.findChildViewById(rootView, id);
      if (enableDarkMode == null) {
        break missingId;
      }

      id = R.id.linearLayoutCompat1;
      LinearLayoutCompat linearLayoutCompat1 = ViewBindings.findChildViewById(rootView, id);
      if (linearLayoutCompat1 == null) {
        break missingId;
      }

      id = R.id.txtChooseColor;
      AppCompatTextView txtChooseColor = ViewBindings.findChildViewById(rootView, id);
      if (txtChooseColor == null) {
        break missingId;
      }

      id = R.id.txtEnableDarkTheme;
      AppCompatTextView txtEnableDarkTheme = ViewBindings.findChildViewById(rootView, id);
      if (txtEnableDarkTheme == null) {
        break missingId;
      }

      return new FragmentAppThemeBinding((ConstraintLayout) rootView, chooseAppColor,
          colorContainer, enableDarkMode, linearLayoutCompat1, txtChooseColor, txtEnableDarkTheme);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
